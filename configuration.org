#+TITLE: Emacs configuration

* Defaults
** Start server
   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC

** Add resources to load path
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/resources/")
   #+END_SRC

** Search init file for bugs
   #+BEGIN_SRC emacs-lisp
     (use-package bug-hunter)
   #+END_SRC

** Load =sensible-defaults.el= for some basic settings
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/sensible-defaults.el/sensible-defaults.el")
     (sensible-defaults/use-all-settings)
     (sensible-defaults/use-all-keybindings)
     (sensible-defaults/backup-to-temp-directory)
   #+END_SRC

** =use-package=
   Use =use-package= for fasters load and simplier dependency management

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

   Always precompile and use the newest version.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :config (auto-compile-on-load-mode))
     (setq load-prefer-newer t)
   #+END_SRC

** Ignore uninterested files with =ignoramus.el=
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/ignoramus/ignoramus.el")
     (use-package ignoramus
       :config (ignoramus-setup))
   #+END_SRC

** =recentf=
   Disable recentf-cleanup on Emacs start, because it can cause problems with
   remote files

   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :config
       (setq recentf-save-file (expand-file-name "~/.emacs.d/private/cache/recentf")
             recentf-max-saved-items 500
             recentf-max-menu-items 15
             recentf-exclude (list "\\.git/.*\\'"
                                   "/elpa/.*\\'"
                                   "/itsalltext/")
             recentf-auto-cleanup 'never)
       (recentf-mode 1))
   #+END_SRC

* Personal information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Valiantsin Mikhaliuk"
          user-mail-address "valiantsin.mikhaliuk@gmail.com"
          calendar-latitude 54.44
          calendar-longitude 18.56
          calendar-location-name "Sopot, PL"
          calendar-week-start-day 1)
  #+END_SRC

* User interface preferences
** Show column numbers
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

** Disable large file warning (> 100MB)
   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold 100000000)
   #+END_SRC

** Save cursor point
   #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq save-place-file  "~/.emacs.d/private/saveplace.el")
    (setq-default save-place t)
   #+END_SRC

** Fonts
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 10
       :config
       (progn
	 (setq which-key-popup-type 'side-window)
	 (setq which-key-compute-remaps t)
	 (setq which-key-allow-multiple-replacements t))
       (which-key-mode))
   #+END_SRC

*** Set default font
    #+BEGIN_SRC emacs-lisp
      (setq nist/default-font "Iosevka")
      (setq nist/default-font-size 15)
      (setq nist/current-font-size nist/default-font-size)
    #+END_SRC

*** Handle resizing
    #+BEGIN_SRC emacs-lisp
      (setq nist/font-change-increment 1.1)

      (defun nist/set-font-size ()
	"Set the font to `nist/default-font` at `nist/current-font-size`."
	(set-frame-font
	 (concat nist/default-font "-" (number-to-string nist/current-font-size))))

      (defun nist/reset-font-size ()
	"Change font size back to `nist/default-font-size'."
	(interactive)
	(setq nist/current-font-size nist/default-font-size)
	(nist/set-font-size))

      (defun nist/increase-font-size ()
	"Increase current font size by a factor of `nist/font-change-increment'."
	(interactive)
	(setq nist/current-font-size
	      (ceiling (* nist/current-font-size nist/font-change-increment)))
	(nist/set-font-size))

      (defun nist/decrease-font-size ()
	"Decrease current font size by a factor of `nist/font-change-increment', down to a minimum size of 1."
	(interactive)
	(setq nist/current-font-size
	      (max 1
		   (floor (/ nist/current-font-size nist/font-change-increment))))
	(nist/set-font-size))

      (define-key global-map (kbd "C-)") 'nist/reset-font-size)
      (define-key global-map (kbd "C-+") 'nist/increase-font-size)
      (define-key global-map (kbd "C-=") 'nist/increase-font-size)
      (define-key global-map (kbd "C-_") 'nist/decrease-font-size)
      (define-key global-map (kbd "C--") 'nist/decrease-font-size)

      (nist/reset-font-size)
    #+END_SRC

** Which-function
   #+BEGIN_SRC emacs-lisp
     (use-package which-func
       :ensure
       :init)
   #+END_SRC

** Disable window chrome
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (when window-system
       (scroll-bar-mode -1))
   #+END_SRC

** Use fancy lambdas
   Why not? ;)

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode +1)
   #+END_SRC

* =evil-mode=
** User =evil=
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1))
      #+END_SRC
**  Enable =evil-surround= everywhere
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
** Do not expand abbrevs when hit escape or c-]
   #+BEGIN_SRC emacs-lisp
     (setq evil-want-abbrev-expand-on-insert-exit nil)
   #+END_SRC
** =evil-collection=
   Adds evil bindings for a lot of modes
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
     :after evil
     :ensure t
     :config)
     #+END_SRC
* Utility functions
