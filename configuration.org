#+TITLE: Emacs configuration

* Defaults
** Start server
   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC

** Add resources to load path
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/resources/")
   #+END_SRC

** Search init file for bugs
   #+BEGIN_SRC emacs-lisp
     (use-package bug-hunter)
   #+END_SRC

** Load =sensible-defaults.el= for some basic settings
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/sensible-defaults.el/sensible-defaults.el")
     (sensible-defaults/use-all-settings)
     (sensible-defaults/use-all-keybindings)
     (sensible-defaults/backup-to-temp-directory)
   #+END_SRC

** =use-package=
   Use =use-package= for fasters load and simplier dependency management

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

   Always precompile and use the newest version.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :config (auto-compile-on-load-mode))
     (setq load-prefer-newer t)
   #+END_SRC

** Ignore uninterested files with =ignoramus.el=
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/ignoramus/ignoramus.el")
     (use-package ignoramus
       :config (ignoramus-setup))
   #+END_SRC

** =recentf=
   Disable recentf-cleanup on Emacs start, because it can cause problems with
   remote files

   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :config
       (setq recentf-save-file (expand-file-name "~/.emacs.d/private/cache/recentf")
             recentf-max-saved-items 500
             recentf-max-menu-items 15
             recentf-exclude (list "\\.git/.*\\'"
                                   "/elpa/.*\\'"
                                   "/itsalltext/")
             recentf-auto-cleanup 'never)
       (recentf-mode 1))
   #+END_SRC

* Personal information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Valiantsin Mikhaliuk"
          user-mail-address "valiantsin.mikhaliuk@gmail.com"
          calendar-latitude 54.44
          calendar-longitude 18.56
          calendar-location-name "Sopot, PL"
          calendar-week-start-day 1)
  #+END_SRC

* User interface preferences
** Show column numbers
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

** Disable large file warning (> 100MB)
   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold 100000000)
   #+END_SRC

** Save cursor point
   #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq save-place-file  "~/.emacs.d/private/saveplace.el")
    (setq-default save-place t)
   #+END_SRC

** Fonts
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 10
       :config
       (progn
	 (setq which-key-popup-type 'side-window)
	 (setq which-key-compute-remaps t)
	 (setq which-key-allow-multiple-replacements t))
       (which-key-mode))
   #+END_SRC

*** Set default font
    #+BEGIN_SRC emacs-lisp
      (setq nist/default-font "Iosevka")
      (setq nist/default-font-size 15)
      (setq nist/current-font-size nist/default-font-size)
    #+END_SRC

*** Handle resizing
    #+BEGIN_SRC emacs-lisp
      (setq nist/font-change-increment 1.1)

      (defun nist/set-font-size ()
	"Set the font to `nist/default-font` at `nist/current-font-size`."
	(set-frame-font
	 (concat nist/default-font "-" (number-to-string nist/current-font-size))))

      (defun nist/reset-font-size ()
	"Change font size back to `nist/default-font-size'."
	(interactive)
	(setq nist/current-font-size nist/default-font-size)
	(nist/set-font-size))

      (defun nist/increase-font-size ()
	"Increase current font size by a factor of `nist/font-change-increment'."
	(interactive)
	(setq nist/current-font-size
	      (ceiling (* nist/current-font-size nist/font-change-increment)))
	(nist/set-font-size))

      (defun nist/decrease-font-size ()
	"Decrease current font size by a factor of `nist/font-change-increment', down to a minimum size of 1."
	(interactive)
	(setq nist/current-font-size
	      (max 1
		   (floor (/ nist/current-font-size nist/font-change-increment))))
	(nist/set-font-size))

      (define-key global-map (kbd "C-)") 'nist/reset-font-size)
      (define-key global-map (kbd "C-+") 'nist/increase-font-size)
      (define-key global-map (kbd "C-=") 'nist/increase-font-size)
      (define-key global-map (kbd "C-_") 'nist/decrease-font-size)
      (define-key global-map (kbd "C--") 'nist/decrease-font-size)

      (nist/reset-font-size)
    #+END_SRC

** Which-function
   #+BEGIN_SRC emacs-lisp
     (use-package which-func
       :ensure
       :init)
   #+END_SRC

** Disable window chrome
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (when window-system
       (scroll-bar-mode -1))
   #+END_SRC

** Use fancy lambdas
   Why not? ;)

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode +1)
   #+END_SRC

** Theme
   Setup transparency
   #+BEGIN_SRC emacs-lisp
     (defun transparency (value)
       "Sets the transparency of the frame window. 0=transparent/100=opaque."
       (interactive "nTransparency Value 0 - 100 opaque:")
       (set-frame-parameter (selected-frame) 'alpha value))
   #+END_SRC

   Install theme
   #+BEGIN_SRC emacs-lisp
     (use-package nord-theme
       :ensure t
       :defer t)
   #+END_SRC

   Apply theme
   #+BEGIN_SRC emacs-lisp
     (defun nist/apply-theme ()
       "Apply the `nord' theme and make frames just slightly transparent."
       (interactive)
       (setq nord-comment-brightness 18)
       (setq nord-region-highlight 'snowstorm)
       (load-theme 'nord t)
       (transparency 95))

     (if (daemonp)
	 (add-hook 'after-make-frame-functions
		   (lambda (frame)
		     (with-selected-frame frame (nist/apply-theme))))
       (nist/apply-theme))
   #+END_SRC

** Smooth scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

** Disable cursor blinking
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
   #+END_SRC

** Force utf-8 everywhere
   #+BEGIN_SRC emacs-lisp
     (set-charset-priority 'unicode)
     (setq locale-coding-system   'utf-8)   ; pretty
     (set-terminal-coding-system  'utf-8)   ; pretty
     (set-keyboard-coding-system  'utf-8)   ; pretty
     (set-selection-coding-system 'utf-8)   ; please
     (prefer-coding-system        'utf-8)   ; with sugar on top
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC

** Highlight the current line
   =global-hl-line-mode= softly highlights the background color of the line
   containing point.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

** Use powerline-evil
   #+BEGIN_SRC emacs-lisp
     (use-package powerline-evil
       :ensure t
       :config
       (custom-set-faces
         '(powerline-evil-normal-face ((t (:foreground "#eee8d5")))))
       (powerline-evil-center-color-theme))
   #+END_SRC

** Hide certain modes from the mode-line
   This either hides or renames a variety of modes using the =diminish= package.

   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :init)
     (defmacro diminish-minor-mode (filename mode &optional abbrev)
       `(eval-after-load (symbol-name ,filename)
	  '(diminish ,mode ,abbrev)))

     (defmacro diminish-major-mode (mode-hook abbrev)
       `(add-hook ,mode-hook
		  (lambda () (setq mode-name ,abbrev))))

     (diminish-minor-mode 'abbrev 'abbrev-mode)
     (diminish-minor-mode 'simple 'auto-fill-function)
     (diminish-minor-mode 'company 'company-mode)
     (diminish-minor-mode 'eldoc 'eldoc-mode)
     (diminish-minor-mode 'flycheck 'flycheck-mode)
     (diminish-minor-mode 'flyspell 'flyspell-mode)
     (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
     (diminish-minor-mode 'projectile 'projectile-mode)
     (diminish-minor-mode 'ruby-end 'ruby-end-mode)
     (diminish-minor-mode 'subword 'subword-mode)
     (diminish-minor-mode 'yard-mode 'yard-mode)
     (diminish-minor-mode 'yasnippet 'yas-minor-mode)
     (diminish-minor-mode 'helm 'helm-mode)
     (diminish-minor-mode 'wrap-region 'wrap-region-mode)
     (diminish-minor-mode 'which-key 'which-key-mode)
     (diminish-minor-mode 'focus-autosave-mode 'focus-autosave-mode)
     (diminish-minor-mode 'paredit 'paredit-mode " π")
     (diminish-major-mode 'magit-mode " ")
     (diminish-major-mode 'emacs-lisp-mode-hook "el")
     (diminish-major-mode 'haskell-mode-hook "λ=")
     (diminish-major-mode 'lisp-interaction-mode-hook "λ")
     (diminish-major-mode 'python-mode-hook "Py")
     (diminish-major-mode 'ruby-mode-hook "")
   #+END_SRC
** Highlight uncommited changes using =diff-hl=
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
       (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC

** Browser
*** Internal one
    #+BEGIN_SRC emacs-lisp
      (setq eww-download-directory "~/Downloads")
    #+END_SRC

*** External one
    #+BEGIN_SRC emacs-lisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "chromium")
    #+END_SRC

** Add stripes to a dired buffer
   #+BEGIN_SRC emacs-lisp
     (use-package stripe-buffer
       :ensure t
       :config
       (add-hook 'dired-mode-hook 'stripe-buffer-mode))
   #+END_SRC
** =smartparens=
   #+BEGIN_SRC emacs-lisp
     (use-package evil-smartparens
     :config
     (evil-smartparens-mode)
     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+END_SRC

* =evil-mode=
** Use =evil=
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1))
   #+END_SRC

**  Enable =evil-surround= everywhere
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
** Do not expand abbrevs when hit escape or c-]
   #+BEGIN_SRC emacs-lisp
     (setq evil-want-abbrev-expand-on-insert-exit nil)
   #+END_SRC
** =evil-collection=
   Adds evil bindings for a lot of modes
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
     :ensure t
     :after evil
     :init
     (setq warning-suppress-types '((evil-collection))))
     #+END_SRC

* Utility functions
