#+TITLE: Emacs configuration

* Defaults
** Start server
   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC

** Add resources to load path
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/resources/")
   #+END_SRC

** Search init file for bugs
   #+BEGIN_SRC emacs-lisp
     (use-package bug-hunter)
   #+END_SRC

** Load =sensible-defaults.el= for some basic settings
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/sensible-defaults.el/sensible-defaults.el")
     (sensible-defaults/use-all-settings)
     (sensible-defaults/use-all-keybindings)
     (sensible-defaults/backup-to-temp-directory)
   #+END_SRC

** =use-package=
   Use =use-package= for fasters load and simplier dependency management

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (setq use-package-verbose t)
     (setq use-package-always-ensure t)

     (require 'use-package)
   #+END_SRC

   Always precompile and use the newest version.

   #+BEGIN_SRC emacs-lisp
     (use-package auto-compile
       :config (auto-compile-on-load-mode))
     (setq load-prefer-newer t)
   #+END_SRC

** Ignore uninterested files with =ignoramus.el=
   #+BEGIN_SRC emacs-lisp
     (load-file "~/.emacs.d/resources/ignoramus/ignoramus.el")
     (use-package ignoramus
       :config (ignoramus-setup))
   #+END_SRC

** =recentf=
   Disable recentf-cleanup on Emacs start, because it can cause problems with
   remote files

   #+BEGIN_SRC emacs-lisp
     (use-package recentf
       :config
       (setq recentf-save-file (expand-file-name "~/.emacs.d/private/cache/recentf")
             recentf-max-saved-items 500
             recentf-max-menu-items 15
             recentf-exclude (list "\\.git/.*\\'"
                                   "/elpa/.*\\'"
                                   "/itsalltext/")
             recentf-auto-cleanup 'never)
       (recentf-mode 1))
   #+END_SRC

** Toggle frame maximized (avoid empty space on right side after start - gtk bug)
   #+BEGIN_SRC emacs-lisp
     (toggle-frame-maximized)
   #+END_SRC

* Personal information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Valiantsin Mikhaliuk"
          user-mail-address "valiantsin.mikhaliuk@gmail.com"
          calendar-latitude 54.44
          calendar-longitude 18.56
          calendar-location-name "Sopot, PL"
          calendar-week-start-day 1)
  #+END_SRC

* User interface preferences
** Show column numbers
   #+BEGIN_SRC emacs-lisp
     (setq column-number-mode t)
   #+END_SRC

** Disable large file warning (> 100MB)
   #+BEGIN_SRC emacs-lisp
     (setq large-file-warning-threshold 100000000)
   #+END_SRC

** Save cursor point
   #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq save-place-file  "~/.emacs.d/private/saveplace.el")
    (setq-default save-place t)
   #+END_SRC

** Fonts
** Which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :defer 10
       :config
       (progn
	 (setq which-key-popup-type 'side-window)
	 (setq which-key-compute-remaps t)
	 (setq which-key-allow-multiple-replacements t))
       (which-key-mode))
   #+END_SRC

*** Set default font
    #+BEGIN_SRC emacs-lisp
      (setq nist/default-font "Iosevka")
      (setq nist/default-font-size 15)
      (setq nist/current-font-size nist/default-font-size)
    #+END_SRC

*** Handle resizing
    #+BEGIN_SRC emacs-lisp
      (setq nist/font-change-increment 1.1)

      (defun nist/set-font-size ()
	"Set the font to `nist/default-font` at `nist/current-font-size`."
	(set-frame-font
	 (concat nist/default-font "-" (number-to-string nist/current-font-size))))

      (defun nist/reset-font-size ()
	"Change font size back to `nist/default-font-size'."
	(interactive)
	(setq nist/current-font-size nist/default-font-size)
	(nist/set-font-size))

      (defun nist/increase-font-size ()
	"Increase current font size by a factor of `nist/font-change-increment'."
	(interactive)
	(setq nist/current-font-size
	      (ceiling (* nist/current-font-size nist/font-change-increment)))
	(nist/set-font-size))

      (defun nist/decrease-font-size ()
	"Decrease current font size by a factor of `nist/font-change-increment', down to a minimum size of 1."
	(interactive)
	(setq nist/current-font-size
	      (max 1
		   (floor (/ nist/current-font-size nist/font-change-increment))))
	(nist/set-font-size))

      (define-key global-map (kbd "C-)") 'nist/reset-font-size)
      (define-key global-map (kbd "C-+") 'nist/increase-font-size)
      (define-key global-map (kbd "C-=") 'nist/increase-font-size)
      (define-key global-map (kbd "C-_") 'nist/decrease-font-size)
      (define-key global-map (kbd "C--") 'nist/decrease-font-size)

      (nist/reset-font-size)
    #+END_SRC

** Which-function
   #+BEGIN_SRC emacs-lisp
     (use-package which-func
       :ensure
       :init)
   #+END_SRC

** Disable window chrome
   #+BEGIN_SRC emacs-lisp
     (tool-bar-mode 0)
     (menu-bar-mode 0)
     (when window-system
       (scroll-bar-mode -1))
   #+END_SRC

** Use fancy lambdas
   Why not? ;)

   #+BEGIN_SRC emacs-lisp
     (global-prettify-symbols-mode +1)
   #+END_SRC

** Theme
   Setup transparency

   #+BEGIN_SRC emacs-lisp
     (defun nist/apply-transparency (value)
       "Sets the transparency of the frame window. 0=transparent/100=opaque."
       (interactive "nTransparency Value 0 - 100 opaque:")
       (set-frame-parameter (selected-frame) 'alpha value))
   #+END_SRC

   Install theme

   #+BEGIN_SRC emacs-lisp
		 (use-package doom-themes
			 :ensure t
			 :defer t
			 :init
			 (doom-themes-org-config))
   #+END_SRC

   Setup

   #+BEGIN_SRC emacs-lisp
		 (defun nist/apply-nord-theme ()
			 "Apply the `nord' theme and make frames just slightly transparent."
			 (interactive)
			 (setq nord-comment-brightness 18)
			 (setq nord-region-highlight 'snowstorm)
			 (load-theme 'doom-nord t)
			 (nist/apply-transparency 95))

		 (defun nist/apply-molokai-theme ()
			 "Apply the `doom-molokai` theme"
			 (interactive)
			 (load-theme 'doom-molokai t)
			 (nist/apply-transparency 95))
   #+END_SRC

	 Apply theme

	 #+BEGIN_SRC emacs-lisp
		 (if (daemonp)
				 (add-hook 'after-make-frame-functions
									 (lambda (frame)
										 (with-selected-frame frame (nist/apply-molokai-theme))))
			 (nist/apply-molokai-theme))
	 #+END_SRC

** Smooth scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

** Disable cursor blinking
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
   #+END_SRC

** Force utf-8 everywhere
   #+BEGIN_SRC emacs-lisp
     (set-charset-priority 'unicode)
     (setq locale-coding-system   'utf-8)   ; pretty
     (set-terminal-coding-system  'utf-8)   ; pretty
     (set-keyboard-coding-system  'utf-8)   ; pretty
     (set-selection-coding-system 'utf-8)   ; please
     (prefer-coding-system        'utf-8)   ; with sugar on top
     (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
   #+END_SRC

** Highlight the current line
   =global-hl-line-mode= softly highlights the background color of the line
   containing point.

   #+BEGIN_SRC emacs-lisp
     (when window-system
       (global-hl-line-mode))
   #+END_SRC

** Use powerline-evil
   #+BEGIN_SRC emacs-lisp
     (use-package powerline-evil
       :ensure t
       :config
       (custom-set-faces
         '(powerline-evil-normal-face ((t (:foreground "#eee8d5")))))
       (powerline-evil-center-color-theme))
   #+END_SRC

** Hide certain modes from the mode-line
   This either hides or renames a variety of modes using the =diminish= package.

   #+BEGIN_SRC emacs-lisp
     (use-package diminish
       :init)
     (defmacro diminish-minor-mode (filename mode &optional abbrev)
       `(eval-after-load (symbol-name ,filename)
	  '(diminish ,mode ,abbrev)))

     (defmacro diminish-major-mode (mode-hook abbrev)
       `(add-hook ,mode-hook
		  (lambda () (setq mode-name ,abbrev))))

     (diminish-minor-mode 'abbrev 'abbrev-mode)
     (diminish-minor-mode 'simple 'auto-fill-function)
     (diminish-minor-mode 'company 'company-mode)
     (diminish-minor-mode 'eldoc 'eldoc-mode)
     (diminish-minor-mode 'flycheck 'flycheck-mode)
     (diminish-minor-mode 'flyspell 'flyspell-mode)
     (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
     (diminish-minor-mode 'projectile 'projectile-mode)
     (diminish-minor-mode 'ruby-end 'ruby-end-mode)
     (diminish-minor-mode 'subword 'subword-mode)
     (diminish-minor-mode 'yard-mode 'yard-mode)
     (diminish-minor-mode 'yasnippet 'yas-minor-mode)
     (diminish-minor-mode 'helm 'helm-mode)
     (diminish-minor-mode 'wrap-region 'wrap-region-mode)
     (diminish-minor-mode 'which-key 'which-key-mode)
     (diminish-minor-mode 'focus-autosave-mode 'focus-autosave-mode)
     (diminish-minor-mode 'paredit 'paredit-mode " π")
     (diminish-major-mode 'magit-mode " ")
     (diminish-major-mode 'emacs-lisp-mode-hook "el")
     (diminish-major-mode 'haskell-mode-hook "λ=")
     (diminish-major-mode 'lisp-interaction-mode-hook "λ")
     (diminish-major-mode 'python-mode-hook "Py")
     (diminish-major-mode 'ruby-mode-hook "")
   #+END_SRC
** Highlight uncommited changes using =diff-hl=
   #+BEGIN_SRC emacs-lisp
     (use-package diff-hl
       :ensure t
       :config
       (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
       (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
   #+END_SRC

** Browser
*** Internal one
    #+BEGIN_SRC emacs-lisp
      (setq eww-download-directory "~/Downloads")
    #+END_SRC

*** External one
    #+BEGIN_SRC emacs-lisp
      (setq browse-url-browser-function 'browse-url-generic
            browse-url-generic-program "chromium")
    #+END_SRC

** Add stripes to a dired buffer
   #+BEGIN_SRC emacs-lisp
     (use-package stripe-buffer
       :ensure t
       :config
       (add-hook 'dired-mode-hook 'stripe-buffer-mode))
   #+END_SRC
** =smartparens=
   #+BEGIN_SRC emacs-lisp
     (use-package evil-smartparens
     :config
     (evil-smartparens-mode)
     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
   #+END_SRC

** Use =guru-mode= to escape ambiguous keystrokes
   #+BEGIN_SRC emacs-lisp
     (use-package guru-mode
       :ensure t
       :diminish
       :config
       (guru-global-mode 1)
       (add-hook 'prog-mode-hook 'guru-mode))
   #+END_SRC

* =evil-mode=
** Use =evil=
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       :config
       (evil-mode 1))
   #+END_SRC

**  Enable =evil-surround= everywhere
   #+BEGIN_SRC emacs-lisp
     (use-package evil-surround
       :ensure t
       :config
       (global-evil-surround-mode 1))
   #+END_SRC
** Do not expand abbrevs when hit escape or c-]
   #+BEGIN_SRC emacs-lisp
     (setq evil-want-abbrev-expand-on-insert-exit nil)
   #+END_SRC
** =evil-collection=
   Adds evil bindings for a lot of modes
   #+BEGIN_SRC emacs-lisp
     (use-package evil-collection
     :ensure t
     :after evil
     :init
     (setq warning-suppress-types '((evil-collection))))
     #+END_SRC

* Utility functions
* Programming
** Common
*** Default tab width
   #+BEGIN_SRC emacs-lisp
     (setq-default tab-width 2)
   #+END_SRC

*** CamelCase everywhere
	 #+BEGIN_SRC emacs-lisp
	   (global-subword-mode 1)
	 #+END_SRC

*** Scroll compilation window to bottom automatically
	 #+BEGIN_SRC emacs-lisp
	   (setq compilation-scroll-output t)
	 #+END_SRC

*** =Magit= (Emacs mode for interactions with or even More)
		#+BEGIN_SRC emacs-lisp
		  (use-package evil-magit)
			(use-package magit
			  :bind ("C-x g" . magit-status)
				:config
				(use-package evil-magit)
				(setq magit-push-always-verify nil)
				(add-hook 'git-commit-mode-hook 'turn-on-flyspell)
				(add-hook 'with-editor-mode-hook 'evil-insert-state))
		#+END_SRC

** Projectile
   #+BEGIN_SRC emacs-lisp
		 (defun nist/search-project-for-symbol-at-point ()
			 "Use `projectile-ag' to search the current project for `symbol-at-point'."
			 (interactive)
			 (projectile-ag (projectile-symbol-at-point)))

		 (use-package ag
			 :ensure t)

		 (use-package projectile
			 :ensure t
			 :bind-keymap ("C-c p" . projectile-command-map)
			 :init
			 (global-set-key (kbd "C-c v") 'projectile-ag)
			 (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)
			 (global-set-key (kbd "C-c C-v") 'nist/search-project-for-symbol-at-point))
   #+END_SRC

** CSS and SASS
**** Indent 2 spaces
	 #+BEGIN_SRC emacs-lisp
		 (add-hook 'css-mode-hook (lambda ()
																(setq css-indent-offset 2)))
		 (add-hook 'scss-mode-hook (lambda ()
																 (setq css-indent-offset 2)))

	 #+END_SRC

**** Use =rainbow-mode=
		 #+BEGIN_SRC emacs-lisp
			 (use-package rainbow-mode
				 :ensure t)
		 #+END_SRC

**** Use =css-mode=
	 #+BEGIN_SRC emacs-lisp
		 (use-package css-mode
			 :config
			 (rainbow-mode))
	 #+END_SRC

**** Do not trigger compile on each save
		 #+BEGIN_SRC emacs-lisp
			 (use-package scss-mode
				 :config
				 (setq scss-compile-at-save nil))
		 #+END_SRC

** Haskell

	 Enable =haskell-doc-mode= (smart function signatures and smart indentation).

	 #+BEGIN_SRC emacs-lisp
		 (setq exec-path (append exec-path (list "~/.cabal/bin")))
		 (use-package haskell-mode
			 :ensure t
			 :config
			 (add-hook 'haskell-mode-hook
								 (lambda ()
									 (haskell-doc-mode)
									 (turn-on-haskell-indent)
									 )))
	 #+End_SRC

** JavaScript (and CoffeeScript)
	 #+BEGIN_SRC emacs-lisp
		 (use-package coffee-mode
			 :ensure t
			 :init
			 (setq js-indent-level 2)
			 (add-hook 'coffee-mode-hook
								 (lambda ()
									 (yas-minor-mode 1)
									 (setq coffee-tab-width 2)
									 (setq whitespace-action '(auto-cleanup)))))
	 #+END_SRC

	 After compiling coffee into js, I wan't to move to corresponding point in js file

	 #+BEGIN_SRC emacs-lisp
		 (setq coffee-args-compile '("-c" "--no-header" "-m"))
		 (add-hook 'coffee-after-compile-hook 'sourcemap-goto-corresponding-point)
	 #+END_SRC

	 Remove file after this dance

	 #+BEGIN_SRC emacs-lisp
		 (defun nist/coffee-after-compile-hook (props)
			 (sourcemap-goto-corresponding-point props)
			 (delete-file (plist-get props :sourcemap)))
		 (add-hook 'coffee-after-compile-hook 'nist/coffee-after-compile-hook)
	 #+END_SRC

** Lisps

	 Install required packages

	 #+BEGIN_SRC emacs-lisp
		 (use-package paredit
			 :ensure t)
		 (use-package rainbow-delimiters
			 :ensure t
			 :init)
	 #+END_SRC

	 Add some hooks

	 #+BEGIN_SRC emacs-lisp
		 (setq lispy-mode-hooks
					 '(emacs-lisp-mode-hook
						 lisp-mode-hook
						 scheme-mode-hook))
		 (dolist (hook lispy-mode-hooks)
			 (add-hook hook (lambda ()
												(setq show-paren-style 'expression)
												(paredit-mode)
												(rainbow-delimiters-mode))))
	 #+END_SRC

	 Also use =eldoc-mode= in elisp buffers

	 #+BEGIN_SRC emacs-lisp
		 (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
	 #+END_SRC
** Python
	 More - [[https://github.com/howardabrams/dot-files/blob/master/emacs-python.org][in this tutorial]]

	 Indent 2 spaces.
	 #+BEGIN_SRC emacs-lisp
	   (setq python-indent 2)
	 #+END_SRC

	 Virtualenv

	 #+BEGIN_SRC emacs-lisp
		 (use-package pyenv-mode
			 :ensure t
			 :config
			 (defun projectile-pyenv-mode-set ()
				 "Set pyenv version matching project name."
				 (let ((project (projectile-project-name)))
					 (if (member project (pyenv-mode-versions))
							 (pyenv-mode-set project)
						 (pyenv-mode-unset))))
			 (add-hook 'projectile-switch-project-hook 'projectile-pyenv-mode-set)
			 (add-hook 'python-mode-hook 'pyenv-mode))

		 (use-package pyenv-mode-auto
			 :ensure t)
	 #+END_SRC

	 WSGI files (be careful with tabs>)

	 #+BEGIN_SRC emacs-lisp
		 (use-package python
			 :mode ("\\.py\\'" . python-mode)
						 ("\\.wsgi$" . python-mode)
			 :interpreter ("python" . python-mode)
			 :init
			 (setq-default indent-tabs-mode nil)
			 :config
			 (setq python-indent-offset 4)
			 (add-hook 'python-mode-hook 'smartparens-mode))
	 #+END_SRC

   =jedi= with company-backend

   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :init
       (add-to-list 'company-backends 'company-jedi)
       :config
       (use-package company-jedi
         :ensure t
         :init
         (add-hook 'python-mode-hook (lambda () (add-to-list 'company-backends 'company-jedi)))
         (setq company-jedi-python-bin "python")))
   #+END_SRC

	 And finally =elpy=

	 #+BEGIN_SRC emacs-lisp
		 (use-package elpy
			 :ensure t
			 :commands elpy-enable
			 :init (with-eval-after-load 'python (elpy-enable))

			 :config
			 (electric-indent-local-mode -1)
			 (delete 'elpy-module-highlight-indentation elpy-modules)
			 (delete 'elpy-module-flymake elpy-modules)

			 (defun ha/elpy-goto-definition ()
				 (interactive)
				 (condition-case err
						 (elpy-goto-definition)
					 ('error (xref-find-definitions (symbol-name (symbol-at-point))))))

			 :bind (:map elpy-mode-map ([remap elpy-goto-definition] .
																	ha/elpy-goto-definition)))
	 #+END_SRC
** Ruby
*** Disable the ruby-reek cheker.

    #+BEGIN_SRC emacs-lisp
     (setq-default flycheck-disabled-checkers '(ruby-reek))
    #+END_SRC

*** Switch between implementation and spec

    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'evil-ex
        '(evil-ex-define-cmd "A[switch to test/model in new window]"
                             'projectile-find-implementation-or-test-other-window))
      (eval-after-load 'evil-ex
        '(evil-ex-define-cmd "a[switch to test/model in current window"
                             'projectile-toggle-between-implementation-and-test))

    #+END_SRC

*** Rubocop-autocorrect-current-file
    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'evil-ex
        '(evil-ex-define-cmd "cop[rubocop-autocorrect-current-file]"
                             'rubocop-autocorrect-current-file))

    #+END_SRC

*** Visit last migration

    #+BEGIN_SRC emacs-lisp
      (eval-after-load 'evil-ex
        '(evil-ex-define-cmd "vlm[visit-last-migration]"
                             'hrs/visit-last-migration))
    #+END_SRC
*** =chruby=
    I use =chruby= to switch between versions of Ruby. This sets a default version
    to use within Emacs (for things like =xmp= or =rspec=).

    #+BEGIN_SRC emacs-lisp
      (use-package chruby
        :config
        (chruby "2.5.1"))
    #+END_SRC

*** Eval into comments
    =rcodetools= provides =xmp=, which lets us evaluate a Ruby buffer and
    display the result in "magic" (=# =>=) comments.

    #+BEGIN_SRC emacs-lisp
      (setq xmpfilter-command-name
        "ruby -S xmpfilter --no-warnings --dev --fork --detect-rbtest")
      (require 'rcodetools)
    #+END_SRC

    Install robe

    #+BEGIN_SRC emacs-lisp
      (use-package robe
        :ensure t
        :bind ("C-M-." . robe-jump)
        :init
        (add-hook 'ruby-mode-hook 'robe-mode))
    #+END_SRC
